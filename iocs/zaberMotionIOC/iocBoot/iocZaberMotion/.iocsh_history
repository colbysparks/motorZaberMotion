epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
< envPaths
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
< envPaths
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
< envPaths
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
< envPaths
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
< motor.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
cd "${TOP}"
## Register all support components
dbLoadDatabase "dbd/zaberMotion.dbd"
zaberMotion_registerRecordDeviceDriver pdbbase
## motorUtil (allstop & alldone)
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=zaberMotion:")
cd "${TOP}/iocBoot/${IOC}"
##
< dbPath.cmd.zaber
#!../../bin/darwin-aarch64/zaberMotion
< common.iocsh
< envPaths
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
epicsEnvSet("IOC","iocZaberMotion")
epicsEnvSet("TOP","/Users/colby.sparks/EPICS/support/motor/modules/motorZaberMotion/iocs/zaberMotionIOC")
epicsEnvSet("MOTOR","/Users/colby.sparks/EPICS/support/motor")
epicsEnvSet("ASYN","/Users/colby.sparks/EPICS/support/asyn")
epicsEnvSet("SNCSEQ","/Users/colby.sparks/EPICS/support/sequencer")
epicsEnvSet("EPICS_BASE","/Users/colby.sparks/EPICS/base-7.0.8.1")
epicsEnvSet("SUPPORT","/Users/colby.sparks/EPICS/support")
###
# ZaberMotionSetDbPath(
#    path of local copy of zaber device database
# )
###
ZaberMotionSetDbPath("/home/ubuntu/Downloads/devices-public.sqlite")
dbLoadTemplate("motor.substitutions.zaber")
###
# ZaberMotionCreateController(
#    asyn motor port (will be created),
#    num axes,
#    moving poll period (ms),
#    idle poll period (ms)
#    address or serial port name of zaber device (prefixed with tcp:// or serial://)
#    zaber device number (1-indexed)
# )
###
ZaberMotionCreateController("XMCC2", 2, 100, 5000, "serial:///dev/ttyUSB0", 1)
ZaberMotionCreateController("XLDQ",  1, 100, 5000, "serial:///dev/ttyUSB0", 2)
ZaberMotionCreateController("XFWRE", 1, 100, 5000, "serial:///dev/ttyUSB0", 3)
ZaberMotionCreateController("XMCC2_tcp", 2, 100, 5000, "tcp://my.local.controller", 1)
